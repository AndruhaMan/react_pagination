{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pagesCount","Math","ceil","pagesArray","currentPageItems","map","slice","className","cn","disabled","href","onClick","page","active","handlePageChanging","item","App","useState","setCurrentPage","itemsPerPage","setItemsPerPage","firstItemOnPage","lastItemOnPage","id","onChange","event","target","value","selected","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"2MAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,WCQIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAC/BM,EAAuBd,EAAW,EAAGW,GAGrCI,EAFQf,EAAW,EAAGO,GACzBS,KAAI,SAAAZ,GAAC,qBAAYA,MACWa,OAC5BR,EAAc,GAAKD,EACpBC,EAAcD,GAqBhB,OACE,qCACE,qBAAIU,UAAU,aAAd,UACE,oBACEA,UAAWC,IACT,YACA,CAAEC,SAA0B,IAAhBX,IAHhB,SAME,mBACE,UAAQ,WACRS,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBZ,EACfa,QAAS,WAzBG,IAAhBb,GACFC,EAAaD,EAAc,IAmBvB,oBAUDK,EAAWE,KAAI,SAAAO,GAAI,OAClB,oBAEEL,UAAWC,IACT,YACA,CAAEK,OAAQD,IAASd,IAJvB,SAOE,mBACE,UAAQ,WACRS,UAAU,YACVG,KAAI,WAAME,GACVD,QAAS,kBAjDM,SAACC,GACtBA,IAASd,GACXC,EAAaa,GA+CUE,CAAmBF,IAJpC,SAMGA,KAZEA,MAgBT,oBACEL,UAAWC,IACT,YACA,CAAEC,SAAUX,IAAgBE,IAHhC,SAME,mBACE,UAAQ,WACRO,UAAU,YACVG,KAAK,QACL,gBAAeZ,IAAgBE,EAC/BW,QAAS,WArDbb,IAAgBE,GAClBD,EAAaD,EAAc,IA+CvB,uBAWJ,6BACGM,EAAiBC,KAAI,SAAAU,GAAI,OACxB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YClGrBC,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAOnB,EAAP,KAAoBoB,EAApB,KACA,EAAwCD,mBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KAEMC,GAAoBvB,EAAc,GAAKqB,EAAgB,EACvDG,EAAiBxB,EAAcqB,EAPnB,GAQdrB,EAAcqB,EARA,GAWlB,OACE,sBAAKZ,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWT,EADX,mBACiCuB,EADjC,cACsDC,EADtD,eAfc,GAed,OAIA,sBAAKf,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRgB,GAAG,kBACHhB,UAAU,eACViB,SAAU,SAACC,GACTL,GAAiBK,EAAMC,OAAOC,OAC9BT,EAAe,IANnB,UASE,wBAAQS,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAIC,UAAQ,EAA1B,eACA,wBAAQD,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOE,QAAQ,kBAAkBtB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEX,MA3CY,GA4CZC,QAASsB,EACTrB,YAAaA,EACbC,aAAc,SAACa,GACbM,EAAeN,UChDzBkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.42cd93bd.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n// const items = getNumbers(1, 42)\n//   .map(n => `Item ${n}`);\n\ninterface Props {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const pagesCount = Math.ceil(total / perPage);\n  const pagesArray: number[] = getNumbers(1, pagesCount);\n  const items = getNumbers(1, total)\n    .map(n => `Item ${n}`);\n  const currentPageItems = items.slice(\n    (currentPage - 1) * perPage,\n    currentPage * perPage,\n  );\n\n  const handlePageChanging = (page: number) => {\n    if (page !== currentPage) {\n      onPageChange(page);\n    }\n  };\n\n  const handlePrevLinkClick = () => {\n    if (currentPage !== 1) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  const handleNextLinkClick = () => {\n    if (currentPage !== pagesCount) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={cn(\n            'page-item',\n            { disabled: currentPage === 1 },\n          )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1}\n            onClick={() => handlePrevLinkClick()}\n          >\n            «\n          </a>\n        </li>\n        {pagesArray.map(page => (\n          <li\n            key={page}\n            className={cn(\n              'page-item',\n              { active: page === currentPage },\n            )}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => handlePageChanging(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n        <li\n          className={cn(\n            'page-item',\n            { disabled: currentPage === pagesCount },\n          )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === pagesCount}\n            onClick={() => handleNextLinkClick()}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {currentPageItems.map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\n\nconst TOTAL_ITEMS = 42;\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n\n  const firstItemOnPage = ((currentPage - 1) * itemsPerPage) + 1;\n  const lastItemOnPage = currentPage * itemsPerPage < TOTAL_ITEMS\n    ? currentPage * itemsPerPage\n    : TOTAL_ITEMS;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItemOnPage} - ${lastItemOnPage} of ${TOTAL_ITEMS})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={(event) => {\n              setItemsPerPage(+event.target.value);\n              setCurrentPage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\" selected>5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={TOTAL_ITEMS}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={(page: number) => {\n          setCurrentPage(page);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}